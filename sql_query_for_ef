
curl -X POST "https://example.com/api/endpoint" \
     -H "Content-Type: application/octet-stream" \
     --data-binary "@yourfile.txt"




DELIMITER //

CREATE PROCEDURE MyProcedure()
BEGIN
    DECLARE CONTINUE HANDLER FOR SQLEXCEPTION
    BEGIN
        -- Handle the SQL exception here
        -- You can log the error, raise a custom error, or perform other actions
        -- For example, you can log the error message to an error log table
        INSERT INTO error_log (error_message) VALUES (CONCAT('Error: ', SQLSTATE));
    END;

    -- Your main procedure code here
    -- ...

    -- If an error condition arises, you can raise an exception
    IF some_condition THEN
        -- Raise a custom exception
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Custom error message';
    END IF;

    -- ...

    -- Continue with your procedure
END //

DELIMITER ;


----------------------------------
DECLARE result VARCHAR(255);

    SET result = CASE 
        WHEN input_value = 1 THEN 'Value is 1'
        WHEN input_value = 2 THEN 'Value is 2'
        ELSE 'Value is neither 1 nor 2'
    END;

-------------------------------

CREATE TABLE error_log (
    error_id INT AUTO_INCREMENT PRIMARY KEY,
    error_message TEXT,
    error_code VARCHAR(255),
    error_timestamp TIMESTAMP DEFAULT CURRENT_TIMESTAMP
);
----------------------------------
DELIMITER //

CREATE PROCEDURE MyProcedure()
BEGIN
    DECLARE my_boolean INT;

    -- Set to TRUE (1)
    SET my_boolean = 1;

    -- Check the boolean variable
    IF my_boolean = 1 THEN
        -- Do something if it's TRUE
    ELSE
        -- Do something if it's FALSE
    END IF;
    
    -- You can also use boolean variables in conditions
    IF my_boolean THEN
        -- Do something if it's TRUE
    ELSE
        -- Do something if it's FALSE
    END IF;
    
    -- Reset to FALSE (0)
    SET my_boolean = 0;
END //

DELIMITER ;




-------------------------
DELIMITER //

CREATE PROCEDURE MyProcedure()
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        -- Code to handle the exception goes here
        -- You can access error information using GET DIAGNOSTICS or SQLSTATE
        -- For example, GET DIAGNOSTICS CONDITION 1 @p1 = MESSAGE_TEXT;
        -- Insert error information into an error log table, print an error message, etc.
    END;

    -- Your main procedure code here
    -- ...

    -- If an error condition arises, you can raise an exception
    IF some_condition THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Custom error message';
    END IF;

    -- ...

    -- Continue with your procedure
END //

DELIMITER ;



DELIMITER //

CREATE PROCEDURE MyProcedure()
BEGIN
    DECLARE EXIT HANDLER FOR SQLEXCEPTION
    BEGIN
        -- Error occurred, insert error information into the error log table
        INSERT INTO error_log (error_message, error_code)
        VALUES (CONCAT('Error: ', SQLSTATE), SQLSTATE);
    END;

    -- Your main procedure code here
    -- ...
    -- If an error occurs, use SIGNAL SQLSTATE to raise an exception
    IF some_condition THEN
        SIGNAL SQLSTATE '45000' SET MESSAGE_TEXT = 'Custom error message';
    END IF;

    -- ...
    -- Continue with your procedure
END //

DELIMITER ;




---------------------------------------------------------------------------
DECLARE my_string_constant VARCHAR(255) DEFAULT 'This is a constant string';
-----------------------------------------------------------------------------------
DELIMITER //
CREATE PROCEDURE ConvertAndStoreDatetime()
BEGIN
    -- Declare variables for the datetime conversion
    DECLARE source_datetime VARCHAR(19);
    DECLARE formatted_datetime DATETIME;

    -- Cursor to iterate through the table
    DECLARE done INT DEFAULT 0;
    DECLARE cur CURSOR FOR SELECT datetime_string FROM my_table;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    -- Loop through the table rows
    read_loop: LOOP
        FETCH cur INTO source_datetime;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Convert the VARCHAR datetime to DATETIME format
        SET formatted_datetime = STR_TO_DATE(source_datetime, '%Y-%m-%d %H:%i:%s');

        -- Insert or update the formatted datetime in the table
        UPDATE my_table
        SET formatted_datetime = formatted_datetime
        WHERE datetime_string = source_datetime;
    END LOOP;

    CLOSE cur;
END //
DELIMITER ;


DELIMITER //
CREATE PROCEDURE ConvertAndStoreDate()
BEGIN
    -- Declare variables for the date conversion
    DECLARE source_date VARCHAR(10);
    DECLARE formatted_date DATE;

    -- Cursor to iterate through the table
    DECLARE done INT DEFAULT 0;
    DECLARE cur CURSOR FOR SELECT date_string FROM my_table;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    -- Loop through the table rows
    read_loop: LOOP
        FETCH cur INTO source_date;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Convert the VARCHAR date to DATE format
        SET formatted_date = STR_TO_DATE(source_date, '%Y-%m-%d');

        -- Insert or update the formatted date in the table
        UPDATE my_table
        SET formatted_date = formatted_date
        WHERE date_string = source_date;
    END LOOP;

    CLOSE cur;
END //
DELIMITER ;












-- Start a transaction
START TRANSACTION;

-- Select data from the source table
SELECT id, column1, column2
FROM source_table;

-- Check if each row from the source table exists in the destination table
FOR EACH ROW IN RESULT OF SELECT:
    IF NOT EXISTS (SELECT * FROM destination_table WHERE id = ROW.id) THEN
        -- If not present, insert it into the destination table
        INSERT INTO destination_table (id, column1, column2)
        VALUES (ROW.id, ROW.column1, ROW.column2);
    END IF;
END FOR;

-- Commit the transaction
COMMIT;

-------------
DELIMITER //
CREATE PROCEDURE CopyDataIfNotExists()
BEGIN
    -- Declare variables for the columns you want to copy
    DECLARE source_id INT;
    DECLARE source_column1 VARCHAR(255); -- Change data types as needed
    DECLARE source_column2 VARCHAR(255); -- Change data types as needed

    -- Cursor to iterate through the source_table
    DECLARE done INT DEFAULT 0;
    DECLARE cur CURSOR FOR SELECT id, column1, column2 FROM source_table;
    DECLARE CONTINUE HANDLER FOR NOT FOUND SET done = 1;

    OPEN cur;

    -- Loop through the source_table rows
    read_loop: LOOP
        FETCH cur INTO source_id, source_column1, source_column2;
        IF done THEN
            LEAVE read_loop;
        END IF;

        -- Check if the data exists in the destination_table
        IF NOT EXISTS (SELECT * FROM destination_table WHERE id = source_id) THEN
            -- If not present, insert it into the destination_table
            INSERT INTO destination_table (id, column1, column2)
            VALUES (source_id, source_column1, source_column2);
        END IF;
    END LOOP;

    CLOSE cur;
END //
DELIMITER ;
